#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct LOCAL {
    char nome_do_predio[100];
    int numero_da_sala;
};

struct PALESTRANTE {
    char nome_do_palestrante[100];
    char instituicao_de_afiliacao[100];
};

struct CONFERENCIA {
    char nome_da_conferencia[100];
    char area_de_estudo[100];
    char data_da_conferencia[20];
    int duracao_da_conferencia_em_dias;
    struct LOCAL local;
    struct PALESTRANTE lista_de_palestrantes[4];
};

void imprimirConferencia(struct CONFERENCIA c) {
    printf("Nome da Conferência: %s\n", c.nome_da_conferencia);
    printf("Área de Estudo: %s\n", c.area_de_estudo);
    printf("Data da Conferência: %s\n", c.data_da_conferencia);
    printf("Duração: %d dias\n", c.duracao_da_conferencia_em_dias);
    printf("Local: Prédio %s, Sala %d\n", c.local.nome_do_predio, c.local.numero_da_sala);
    for (int i = 0; i < 4; i++) {
        printf("Palestrante %d: %s, %s\n", i + 1, c.lista_de_palestrantes[i].nome_do_palestrante, c.lista_de_palestrantes[i].instituicao_de_afiliacao);
    }
}

struct CONFERENCIA* realocarMemoria(struct CONFERENCIA *lista, int *capacidade) {
    *capacidade += 3;
    lista = (struct CONFERENCIA *)realloc(lista, (*capacidade) * sizeof(struct CONFERENCIA));
    return lista;
}

int main() {
    struct CONFERENCIA *lista_conferencias;
    int capacidade = 3;
    int total_conferencias = 0;
    int opcao;

    lista_conferencias = (struct CONFERENCIA *)malloc(capacidade * sizeof(struct CONFERENCIA));

    while (1) {
        printf("\nMenu:\n");
        printf("1. Adicionar nova conferência\n");
        printf("2. Remover conferência\n");
        printf("3. Buscar conferências por nome do prédio\n");
        printf("4. Alocar memória\n");
        printf("5. Imprimir lista de conferências\n");
        printf("0. Sair do sistema\n");
        printf("Escolha uma opcao: ");
        scanf("%d", &opcao);

        switch(opcao) {
            case 0:
                free(lista_conferencias);
                return 0;

            case 1:
                if (total_conferencias >= capacidade) {
                    printf("limite maxumi. Por favor, adicione memória.\n");
                } else {
                    printf("Inserir nome da conferência: ");
                    scanf(" %[^\n]%*c", lista_conferencias[total_conferencias].nome_da_conferencia);
                    printf("Inserir área de estudo: ");
                    scanf(" %[^\n]%*c", lista_conferencias[total_conferencias].area_de_estudo);
                    printf("Inserir data da conferência (dd/mm/aaaa): ");
                    scanf(" %[^\n]%*c", lista_conferencias[total_conferencias].data_da_conferencia);
                    printf("Inserir duração da conferência em dias: ");
                    scanf("%d", &lista_conferencias[total_conferencias].duracao_da_conferencia_em_dias);
                    printf("Inserir nome do prédio: ");
                    scanf(" %[^\n]%*c", lista_conferencias[total_conferencias].local.nome_do_predio);
                    printf("Inserir número da sala: ");
                    scanf("%d", &lista_conferencias[total_conferencias].local.numero_da_sala);
                    for (int i = 0; i < 4; i++) {
                        printf("Inserir nome do palestrante %d: ", i + 1);
                        scanf(" %[^\n]%*c", lista_conferencias[total_conferencias].lista_de_palestrantes[i].nome_do_palestrante);
                        printf("Inserir instituição de afiliação do palestrante %d: ", i + 1);
                        scanf(" %[^\n]%*c", lista_conferencias[total_conferencias].lista_de_palestrantes[i].instituicao_de_afiliacao);
                    }
                    total_conferencias++;
                }
                break;

            case 2:
                {
                    char nome[100];
                    printf("Inserir nome da conferência a ser removida: ");
                    scanf(" %[^\n]%*c", nome);

                    int encontrado = 0;
                    for (int i = 0; i < total_conferencias; i++) {
                        if (strcmp(lista_conferencias[i].nome_da_conferencia, nome) == 0) {
                            encontrado = 1;
                            for (int j = i; j < total_conferencias - 1; j++) {
                                lista_conferencias[j] = lista_conferencias[j + 1];
                            }
                            total_conferencias--;
                            break;
                        }
                    }
                    if (!encontrado) {
                        printf("Conferência não encontrada.\n");
                    }
                }
                break;

            case 3:
                {
                    char nome_predio[100];
                    printf("Inserir nome do prédio: ");
                    scanf(" %[^\n]%*c", nome_predio);

                    int encontrado = 0;
                    for (int i = 0; i < total_conferencias; i++) {
                        if (strcmp(lista_conferencias[i].local.nome_do_predio, nome_predio) == 0) {
                            imprimirConferencia(lista_conferencias[i]);
                            encontrado = 1;
                        }
                    }
                    if (!encontrado) {
                        printf("Nenhuma conferência encontrada para o prédio %s.\n", nome_predio);
                    }
                }
                break;

            case 4:
                lista_conferencias = realocarMemoria(lista_conferencias, &capacidade);
                printf("Memória realocada. Nova capacidade: %d\n", capacidade);
                break;

            case 5:
                for (int i = 0; i < total_conferencias; i++) {
                    imprimirConferencia(lista_conferencias[i]);
                    printf("\n");
                }
                break;

            default:
                printf("Opção inválida.\n");
                break;
        }
    }

    free(lista_conferencias);

    return 0;
}
